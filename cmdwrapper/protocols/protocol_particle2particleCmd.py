# -*- coding: utf-8 -*-
# **************************************************************************
# *
# * Authors:     Ruben Sanchez Garcia (ruben.sanchez-garcia@stats.ox.ac.uk
# *
# * University of Oxford, Dept. of Statistics
# *
# * This program is free software; you can redistribute it and/or modify
# * it under the terms of the GNU General Public License as published by
# * the Free Software Foundation; either version 2 of the License, or
# * (at your option) any later version.
# *
# * This program is distributed in the hope that it will be useful,
# * but WITHOUT ANY WARRANTY; without even the implied warranty of
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# * GNU General Public License for more details.
# *
# * You should have received a copy of the GNU General Public License
# * along with this program; if not, write to the Free Software
# * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
# * 02111-1307  USA
# *
# *  All comments concerning this program package may be sent to the
# *  e-mail address 'you@yourinstitution.email'
# *
# **************************************************************************


"""
This protocol allow you to run an arbitrary command on an input set of particles
(or several), and generates a starfile with one or more new metadata columns.

"""
import os.path

import pwem
from pyworkflow.protocol import Protocol, params, Integer
from pyworkflow.utils import Message
from pwem.objects import SetOfParticles
from pwem.protocols import ProtProcessParticles, ProtParticles
import relion.convert as convert
from pyworkflow.protocol import constants

class Particle2ParticleCmd(ProtParticles):
    """
    This protocol allow you to run an arbitrary command on an input set of particles
    (or several), and generates an starfile with one or more new metadata columns.
    """
    _label = 'particle2particleCmd'

    # def __init__(self, **kwargs):
    #     super().__init__(**kwargs)
    #     self.stepsExecutionMode = constants.STEPS_SERIAL

    # -------------------------- DEFINE param functions ----------------------
    def _defineParams(self, form):
        """ Define the input parameters that will be used.
        Params:
            form: this is the form to be populated with sections and params.
        """
        # You need a params to belong to a section:
        form.addSection(label=Message.LABEL_INPUT)


        form.addParam('inputParticles', params.PointerParam,
                      pointerClass='SetOfParticles',
                      label=Message.LABEL_INPUT_PART, important=True)
        # Hook that should be implemented in subclasses


        form.addParam('command', params.StringParam,
                      default=None,
                      label='command', important=True,
                      help='Which command should be executed. Particle sets can '
                           'be accessed as particles0.star particles2.star, etc. '
                           'The output starfile generated by the command '
                           'needs to be named output0.star.')
        #TODO: ADD SUPPORT TO ANOTHER TYPE OF INPUTS
        #TODO: ADD SUPPORT TO OUTPUT SEVERAL DATASETS


        __threads, __mpi = self._getDefaultParallel()

        form.addParallelSection(threads=__threads, mpi=__mpi)

    def _getDefaultParallel(self):
        """This protocol doesn't have mpi version"""
        return (0, 0)

    # --------------------------- STEPS functions ------------------------------
    def _insertAllSteps(self):
        # Insert processing steps
        self._insertFunctionStep('convertInputStep')
        self._insertFunctionStep('executeCmd')
        self._insertFunctionStep('createOutputStep')

    @property
    def inputStarFname(self):
        return self._getExtraPath("particles0.star")

    @property
    def outputStarFname(self):
        return self._getExtraPath("output0.star")

    def convertInputStep(self):
        # say what the parameter says!!

        convert.writeSetOfParticles(self.inputParticles.get(),
                                    self.inputStarFname,
                                    postprocessImageRow=None)
        import subprocess
        print(self.command.get())
        subprocess.check_call(self.command.get(), shell=True, cwd=self._getExtraPath())

    def executeCmd(self):
        #TODO: wrap the output to follow self.outputStarFname
        print(os.path.isfile(self.inputStarFname), self.inputStarFname)

    def createOutputStep(self):

        imgSet = self.inputParticles.get()

        partSet = self._createSetOfParticles()
        partSet.copyInfo(imgSet)
        convert.readSetOfParticles(self.outputStarFname,
                                                 partSet,
                                                 alignType=pwem.constants.ALIGN_PROJ,
                                                 )
        self._defineOutputs(outputParticles=partSet)
        self._defineSourceRelation(self.inputParticles, partSet)

    # --------------------------- INFO functions -----------------------------------
    def _summary(self):
        """ Summarize what the protocol has done"""
        summary = []

        if self.isFinished():
            summary.append("You have run the command "+self.command.get()+" ")
        return summary

    def _methods(self):
        methods = []

        if self.isFinished():
            methods.append("You have run the command "+self.command.get()+" ")
        return methods
